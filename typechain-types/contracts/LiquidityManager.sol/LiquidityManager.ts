/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace INonfungiblePositionManager {
  export type MintParamsStruct = {
    token0: AddressLike;
    token1: AddressLike;
    fee: BigNumberish;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    amount0Desired: BigNumberish;
    amount1Desired: BigNumberish;
    amount0Min: BigNumberish;
    amount1Min: BigNumberish;
    recipient: AddressLike;
    deadline: BigNumberish;
  };

  export type MintParamsStructOutput = [
    token0: string,
    token1: string,
    fee: bigint,
    tickLower: bigint,
    tickUpper: bigint,
    amount0Desired: bigint,
    amount1Desired: bigint,
    amount0Min: bigint,
    amount1Min: bigint,
    recipient: string,
    deadline: bigint
  ] & {
    token0: string;
    token1: string;
    fee: bigint;
    tickLower: bigint;
    tickUpper: bigint;
    amount0Desired: bigint;
    amount1Desired: bigint;
    amount0Min: bigint;
    amount1Min: bigint;
    recipient: string;
    deadline: bigint;
  };
}

export declare namespace LiquidityManager {
  export type UserPositionStruct = {
    tokenId: BigNumberish;
    token0: AddressLike;
    token1: AddressLike;
    fee: BigNumberish;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    depositedAmount0: BigNumberish;
    depositedAmount1: BigNumberish;
    createdAt: BigNumberish;
    active: boolean;
  };

  export type UserPositionStructOutput = [
    tokenId: bigint,
    token0: string,
    token1: string,
    fee: bigint,
    tickLower: bigint,
    tickUpper: bigint,
    depositedAmount0: bigint,
    depositedAmount1: bigint,
    createdAt: bigint,
    active: boolean
  ] & {
    tokenId: bigint;
    token0: string;
    token1: string;
    fee: bigint;
    tickLower: bigint;
    tickUpper: bigint;
    depositedAmount0: bigint;
    depositedAmount1: bigint;
    createdAt: bigint;
    active: boolean;
  };
}

export interface LiquidityManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchSetWhitelistStatus"
      | "collectFees"
      | "createPosition"
      | "decreaseLiquidity"
      | "emergencyWithdraw"
      | "executeCommands"
      | "getPosition"
      | "getUserPositions"
      | "increaseLiquidity"
      | "isWhitelisted"
      | "owner"
      | "positionManager"
      | "positionToUser"
      | "renounceOwnership"
      | "setWhitelistStatus"
      | "swapRouter"
      | "swapTokens"
      | "transferOwnership"
      | "userPositions"
      | "whitelistedUsers"
      | "withdrawPosition"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommandsExecuted"
      | "EmergencyWithdraw"
      | "OwnershipTransferred"
      | "PositionClosed"
      | "PositionCreated"
      | "UserWhitelisted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchSetWhitelistStatus",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPosition",
    values: [INonfungiblePositionManager.MintParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidity",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCommands",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidity",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionToUser",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokens",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPositions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedUsers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPosition",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchSetWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCommands",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPosition",
    data: BytesLike
  ): Result;
}

export namespace CommandsExecutedEvent {
  export type InputTuple = [executor: AddressLike, commandCount: BigNumberish];
  export type OutputTuple = [executor: string, commandCount: bigint];
  export interface OutputObject {
    executor: string;
    commandCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [
    user: AddressLike,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [user: string, amount0: bigint, amount1: bigint];
  export interface OutputObject {
    user: string;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionClosedEvent {
  export type InputTuple = [user: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [user: string, tokenId: bigint];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenId: BigNumberish,
    token0: AddressLike,
    token1: AddressLike,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tokenId: bigint,
    token0: string,
    token1: string,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
    token0: string;
    token1: string;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserWhitelistedEvent {
  export type InputTuple = [user: AddressLike, whitelisted: boolean];
  export type OutputTuple = [user: string, whitelisted: boolean];
  export interface OutputObject {
    user: string;
    whitelisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LiquidityManager extends BaseContract {
  connect(runner?: ContractRunner | null): LiquidityManager;
  waitForDeployment(): Promise<this>;

  interface: LiquidityManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchSetWhitelistStatus: TypedContractMethod<
    [users: AddressLike[], whitelisted: boolean],
    [void],
    "nonpayable"
  >;

  collectFees: TypedContractMethod<
    [
      tokenId: BigNumberish,
      recipient: AddressLike,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createPosition: TypedContractMethod<
    [params: INonfungiblePositionManager.MintParamsStruct],
    [bigint],
    "nonpayable"
  >;

  decreaseLiquidity: TypedContractMethod<
    [
      tokenId: BigNumberish,
      liquidity: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [void],
    "nonpayable"
  >;

  executeCommands: TypedContractMethod<
    [commands: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getPosition: TypedContractMethod<
    [tokenId: BigNumberish],
    [LiquidityManager.UserPositionStructOutput],
    "view"
  >;

  getUserPositions: TypedContractMethod<
    [user: AddressLike],
    [LiquidityManager.UserPositionStructOutput[]],
    "view"
  >;

  increaseLiquidity: TypedContractMethod<
    [
      tokenId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isWhitelisted: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  positionManager: TypedContractMethod<[], [string], "view">;

  positionToUser: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setWhitelistStatus: TypedContractMethod<
    [user: AddressLike, whitelisted: boolean],
    [void],
    "nonpayable"
  >;

  swapRouter: TypedContractMethod<[], [string], "view">;

  swapTokens: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      fee: BigNumberish,
      amountIn: BigNumberish,
      amountOutMinimum: BigNumberish,
      deadline: BigNumberish,
      sqrtPriceLimitX96: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userPositions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        tokenId: bigint;
        token0: string;
        token1: string;
        fee: bigint;
        tickLower: bigint;
        tickUpper: bigint;
        depositedAmount0: bigint;
        depositedAmount1: bigint;
        createdAt: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  whitelistedUsers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  withdrawPosition: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchSetWhitelistStatus"
  ): TypedContractMethod<
    [users: AddressLike[], whitelisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectFees"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      recipient: AddressLike,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPosition"
  ): TypedContractMethod<
    [params: INonfungiblePositionManager.MintParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseLiquidity"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      liquidity: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeCommands"
  ): TypedContractMethod<[commands: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [LiquidityManager.UserPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPositions"
  ): TypedContractMethod<
    [user: AddressLike],
    [LiquidityManager.UserPositionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseLiquidity"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positionToUser"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelistStatus"
  ): TypedContractMethod<
    [user: AddressLike, whitelisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapTokens"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      fee: BigNumberish,
      amountIn: BigNumberish,
      amountOutMinimum: BigNumberish,
      deadline: BigNumberish,
      sqrtPriceLimitX96: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPositions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        tokenId: bigint;
        token0: string;
        token1: string;
        fee: bigint;
        tickLower: bigint;
        tickUpper: bigint;
        depositedAmount0: bigint;
        depositedAmount1: bigint;
        createdAt: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "whitelistedUsers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawPosition"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CommandsExecuted"
  ): TypedContractEvent<
    CommandsExecutedEvent.InputTuple,
    CommandsExecutedEvent.OutputTuple,
    CommandsExecutedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PositionClosed"
  ): TypedContractEvent<
    PositionClosedEvent.InputTuple,
    PositionClosedEvent.OutputTuple,
    PositionClosedEvent.OutputObject
  >;
  getEvent(
    key: "PositionCreated"
  ): TypedContractEvent<
    PositionCreatedEvent.InputTuple,
    PositionCreatedEvent.OutputTuple,
    PositionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "UserWhitelisted"
  ): TypedContractEvent<
    UserWhitelistedEvent.InputTuple,
    UserWhitelistedEvent.OutputTuple,
    UserWhitelistedEvent.OutputObject
  >;

  filters: {
    "CommandsExecuted(address,uint256)": TypedContractEvent<
      CommandsExecutedEvent.InputTuple,
      CommandsExecutedEvent.OutputTuple,
      CommandsExecutedEvent.OutputObject
    >;
    CommandsExecuted: TypedContractEvent<
      CommandsExecutedEvent.InputTuple,
      CommandsExecutedEvent.OutputTuple,
      CommandsExecutedEvent.OutputObject
    >;

    "EmergencyWithdraw(address,uint256,uint256)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PositionClosed(address,uint256)": TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;
    PositionClosed: TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;

    "PositionCreated(address,uint256,address,address,uint256,uint256)": TypedContractEvent<
      PositionCreatedEvent.InputTuple,
      PositionCreatedEvent.OutputTuple,
      PositionCreatedEvent.OutputObject
    >;
    PositionCreated: TypedContractEvent<
      PositionCreatedEvent.InputTuple,
      PositionCreatedEvent.OutputTuple,
      PositionCreatedEvent.OutputObject
    >;

    "UserWhitelisted(address,bool)": TypedContractEvent<
      UserWhitelistedEvent.InputTuple,
      UserWhitelistedEvent.OutputTuple,
      UserWhitelistedEvent.OutputObject
    >;
    UserWhitelisted: TypedContractEvent<
      UserWhitelistedEvent.InputTuple,
      UserWhitelistedEvent.OutputTuple,
      UserWhitelistedEvent.OutputObject
    >;
  };
}
